setwd("~/Desktop/manuscripts and projects/3_Postdoc_EMRF/__PAPER 1 - diversification dynamics/MANUSCRIPT/2ROUND/revision/trees/BioGeoBEARS/")
list.files(pattern="dist.csv") -> files.mat
sub("dist.csv", "clean.trees", files.mat) -> files.post
sub("dist.csv", "clean.tre", files.mat) -> files.mcc
sapply(files.mcc, read.tree, simplify=F) -> trees.mcc$
sapply(files.post, read.tree, simplify=F) -> trees.post
sub("_clean.tre", "", files.mcc) -> labs
library(ape)
library(phytools)
library(geiger)
library(magrittr)
library(BioGeoBEARS)
library(parallel)
library(optimx)
library(phangorn)
list.files(pattern="dist.csv") -> files.mat
sub("dist.csv", "clean.trees", files.mat) -> files.post
sub("dist.csv", "clean.tre", files.mat) -> files.mcc
sapply(files.mcc, read.tree, simplify=F) -> trees.mcc$
sapply(files.post, read.tree, simplify=F) -> trees.post
sub("_clean.tre", "", files.mcc) -> labs
keep = c("cr", "nonCr")
areanames = c("E", "N")
sapply(files.mat, read.csv, row.names=1, simplify=F) -> mats
lapply(mats, subset, select=keep) -> mats
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
trees.post[[i]] -> post0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
.compressTipLabel(lapply(post0, drop.tip, drop)) -> post0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
post0 -> trees.post[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
sub("dist.csv", "clean.tre", files.mat) -> files.mcc
sapply(files.mcc, read.tree, simplify=F) -> trees.mcc
sapply(files.post, read.tree, simplify=F) -> trees.post
sub("_clean.tre", "", files.mcc) -> labs
keep = c("cr", "nonCr")
areanames = c("E", "N")
sapply(files.mat, read.csv, row.names=1, simplify=F) -> mats
lapply(mats, subset, select=keep) -> mats
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
trees.post[[i]] -> post0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
.compressTipLabel(lapply(post0, drop.tip, drop)) -> post0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
post0 -> trees.post[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
max_range_size = 2
n.cores = 4
c("Espinhaco","nonEspinhaco") -> actual_names
vector("list", length=length(labs)) -> best.models -> model.comps -> ml.models
names(ml.models) <- names(best.models) <- names(model.comps) <- labs
results<-list()
for (i in 1:length(labs)) {
labs[i] -> l0
trees.mcc[[i]] -> t0
if (is.ultrametric(t0) == F) {
force.ultrametric(t0) -> t0
t0$edge.length[t0$edge.length == 0] <- 0.01
force.ultrametric(t0) -> t0
}
if (min(t0$edge.length)==0) {
force.ultrametric(t0) -> t0
t0$edge.length[t0$edge.length == 0] <- 0.01
force.ultrametric(t0) -> t0
}
tree.file = paste(l0, "_biogeo.tre", sep="")
matrix.file = paste(l0, "_phylip.txt", sep="")
write.tree(t0, tree.file)
### DEC
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
resDEC = bears_optim_run(BioGeoBEARS_run_object)
### DEC+J
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
dstart = resDEC$outputs@params_table["d","est"]
estart = resDEC$outputs@params_table["e","est"]
jstart = 0.0001
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","init"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","est"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","init"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","est"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","type"] = "free"
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = jstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = jstart
resDECj = bears_optim_run(BioGeoBEARS_run_object)
### Stats
restable = NULL
teststable = NULL
LnL_2 = get_LnL_from_BioGeoBEARS_results_object(resDEC)
LnL_1 = get_LnL_from_BioGeoBEARS_results_object(resDECj)
numparams1 = 3
numparams2 = 2
stats = AICstats_2models(LnL_1, LnL_2, numparams1, numparams2)
res2 = extract_params_from_BioGeoBEARS_results_object(results_object=resDEC, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
res1 = extract_params_from_BioGeoBEARS_results_object(results_object=resDECj, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
tmp_tests = conditional_format_table(stats)
restable = rbind(restable, res2, res1)
teststable = rbind(teststable, tmp_tests)
row.names(restable) = c("DEC", "DEC+J")
teststable$alt = "DEC+J"
teststable$null = "DEC"
restable$AIC <- c(teststable$AIC2, teststable$AIC1)
restable -> model.comps[[i]]
write.table(as.matrix(restable), file=paste(l0, "_biogeobears_pars_AIC.txt", sep=""))
rownames(restable)[which.min(restable$AIC)] -> best.model
if (best.model == "DEC") {
resDEC -> biogeo
} else {
resDECj -> biogeo
}
biogeo -> ml.models[[i]]
best.model -> best.models[[i]]
################# TV edited #################
results[[i]]<-biogeo$ML_marginal_prob_each_state_at_branch_top_AT_node
################# TV edited #################
### plot
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
pdf(file=paste(l0, "_biogeobears.pdf", sep=""), width=5, height=10)
#### COLOR SCHEME #### TV EDITED
colors_list_for_states<-c("green", "red", "blue", "darkorchid")
plot_BioGeoBEARS_results(biogeo, paste(l0, "-", best.model), addl_params=list("j"), plotwhat="pie", colors_list_for_states=colors_list_for_states, label.offset=0.001, tipcex=0.001, statecex=1.1, splitcex=0.4, titlecex=0.8, plotsplits=F,  cornercoords_loc=scriptdir, include_null_range=T, tr=t0, show.tip.label = F, tipranges = NULL)
dev.off()
try(dev.off())
}
colors_list_for_states<-colors_list_for_states<-c("green", "red", "blue", "darkorchid")
pdf(file="recon2.pdf", width=30, height=180)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=10, height=200)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=10, height=150)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=10, height=120)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=10, height=80)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=10, height=70)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=5, height=70)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
colors_list_for_states<-colors_list_for_states<-c("green", "red", "blue", "darkorchid")
pdf(file="recon2.pdf", width=5, height=50)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
colors_list_for_states<-colors_list_for_states<-c("green", "red", "blue", "darkorchid")
pdf(file="recon2.pdf", width=10, height=60)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.5, piecol=colors_list_for_states)
axisPhylo()
}
pdf(file="recon2.pdf", width=15, height=80)
colors_list_for_states<-colors_list_for_states<-c("green", "red", "blue", "darkorchid")
pdf(file="recon2.pdf", width=15, height=80)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.5, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
pdf(file="recon2.pdf", width=15, height=120)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
colors_list_for_states<-colors_list_for_states<-c("green", "red", "blue", "darkorchid")
pdf(file="recon2.pdf", width=10, height=120)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.3, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
colors_list_for_states<-colors_list_for_states<-c("green", "red", "blue", "darkorchid")
pdf(file="recon2.pdf", width=10, height=120)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/50->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.4, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
bla<-c()
pdf(file="recon2.pdf", width=15, height=120)
bla<-c()
for(z in 1:length(trees.mcc)){
length(trees.mcc[[z]]$tip.label)/40->b
bla<-c(bla, b)
}
layout(matrix(1:15,ncol=1), heights=bla, TRUE)
for(i in 1:length(trees.mcc)){
plot(trees.mcc[[i]], show.tip.label=F, x.lim=c(1,80))
x<-results[[i]]
npieMax<-trees.mcc[[i]]$Nnode+length(trees.mcc[[i]]$tip.label)
npieMin<-length(trees.mcc[[i]]$tip.label)+1
nodelabels(pie=x[npieMin:npieMax,],cex=0.4, piecol=colors_list_for_states)
axisPhylo()
}
dev.off()
