BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
resDEC = bears_optim_run(BioGeoBEARS_run_object)
### DEC+J
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
dstart = resDEC$outputs@params_table["d","est"]
estart = resDEC$outputs@params_table["e","est"]
jstart = 0.0001
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","init"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","est"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","init"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","est"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","type"] = "free"
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = jstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = jstart
resDECj = bears_optim_run(BioGeoBEARS_run_object)
### Stats
restable = NULL
teststable = NULL
LnL_2 = get_LnL_from_BioGeoBEARS_results_object(resDEC)
LnL_1 = get_LnL_from_BioGeoBEARS_results_object(resDECj)
numparams1 = 3
numparams2 = 2
stats = AICstats_2models(LnL_1, LnL_2, numparams1, numparams2)
res2 = extract_params_from_BioGeoBEARS_results_object(results_object=resDEC, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
res1 = extract_params_from_BioGeoBEARS_results_object(results_object=resDECj, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
tmp_tests = conditional_format_table(stats)
restable = rbind(restable, res2, res1)
teststable = rbind(teststable, tmp_tests)
row.names(restable) = c("DEC", "DEC+J")
teststable$alt = "DEC+J"
teststable$null = "DEC"
restable$AIC <- c(teststable$AIC2, teststable$AIC1)
restable -> model.comps[[i]]
write.table(as.matrix(restable), file=paste(l0, "_biogeobears_pars_AIC.txt", sep=""))
rownames(restable)[which.min(restable$AIC)] -> best.model
if (best.model == "DEC") {
resDEC -> biogeo
} else {
resDECj -> biogeo
}
biogeo -> ml.models[[i]]
best.model -> best.models[[i]]
### plot
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
pdf(file=paste(l0, "_biogeobears.pdf", sep=""), width=5, height=10)
#### COLOR SCHEME #### TV EDITED
colors_list_for_states<-c("green", "red", "blue", "darkorchid")
plot_BioGeoBEARS_results(biogeo, paste(l0, "-", best.model), addl_params=list("j"), plotwhat="pie", colors_list_for_states=colors_list_for_states, label.offset=0.001, tipcex=0.001, statecex=1.1, splitcex=0.4, titlecex=0.8, plotsplits=F,  cornercoords_loc=scriptdir, include_null_range=T, tr=t0, show.tip.label = F, tipranges = NULL)
dev.off()
try(dev.off())
#############################################
### Extrair ages (likelihood)
#############################################
relprobs_matrix = biogeo$ML_marginal_prob_each_state_at_branch_top_AT_node
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=matrix.file)
Ntip(t0) -> n.tips
Nnode(t0) -> n.nodes
c((n.tips++1):(n.tips++n.nodes)) -> nodes
pie.data <- relprobs_matrix[nodes,]
areas.labs = getareas_from_tipranges_object(tipranges)
statenames = areas_list_to_states_list_new(areas.labs, maxareas = max_range_size, include_null_range = T, split_ABC = FALSE)
colnames(pie.data) <- statenames
MLstates = get_ML_states_from_relprobs(relprobs_matrix, statenames, returnwhat = "states", if_ties = "takefirst")
MLstates[nodes] -> node.states
max(nodeHeights(t0)) -> tree.length
sapply(nodes, nodeheight, tree=t0) -> n
(n-tree.length)*-1 -> ages
data.frame(pie.data[,2:4], state=node.states, node=nodes, ages=ages) -> ages.mat
write.csv(ages.mat, file = paste(l0, "_Espinhaco_nodeages_ML_mcc.csv", sep=""), row.names = F)
pdf(file = paste(l0, "_Espinhaco_nodeages_ML_mcc_boxplot.pdf", sep=""))
boxplot(ages ~ state, data=ages.mat)
title(l0)
dev.off()
}
list.files(pattern="dist.csv") -> files.mat
sub("dist.csv", "clean.trees", files.mat) -> files.post
sub("dist.csv", "clean.tre", files.mat) -> files.mcc
sapply(files.mcc, read.tree, simplify=F) -> trees.mcc
sapply(files.post, read.tree, simplify=F) -> trees.post
sub("_clean.tre", "", files.mcc) -> labs
keep = c("cr", "nonCr")
areanames = c("E", "N")
sapply(files.mat, read.csv, row.names=1, simplify=F) -> mats
lapply(mats, subset, select=keep) -> mats
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
trees.post[[i]] -> post0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
.compressTipLabel(lapply(post0, drop.tip, drop)) -> post0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
post0 -> trees.post[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
max_range_size = 2
n.cores = 4
c("Espinhaco","nonEspinhaco") -> actual_names
vector("list", length=length(labs)) -> best.models -> model.comps -> ml.models
names(ml.models) <- names(best.models) <- names(model.comps) <- labs
for (i in 1:length(labs)) {
labs[i] -> l0
trees.mcc[[i]] -> t0
if (is.ultrametric(t0) == F) {
force.ultrametric(t0) -> t0
t0$edge.length[t0$edge.length == 0] <- 0.01
force.ultrametric(t0) -> t0
}
if (min(t0$edge.length)==0) {
force.ultrametric(t0) -> t0
t0$edge.length[t0$edge.length == 0] <- 0.01
force.ultrametric(t0) -> t0
}
tree.file = paste(l0, "_biogeo.tre", sep="")
matrix.file = paste(l0, "_phylip.txt", sep="")
write.tree(t0, tree.file)
### DEC
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
resDEC = bears_optim_run(BioGeoBEARS_run_object)
### DEC+J
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
dstart = resDEC$outputs@params_table["d","est"]
estart = resDEC$outputs@params_table["e","est"]
jstart = 0.0001
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","init"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","est"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","init"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","est"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","type"] = "free"
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = jstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = jstart
resDECj = bears_optim_run(BioGeoBEARS_run_object)
### Stats
restable = NULL
teststable = NULL
LnL_2 = get_LnL_from_BioGeoBEARS_results_object(resDEC)
LnL_1 = get_LnL_from_BioGeoBEARS_results_object(resDECj)
numparams1 = 3
numparams2 = 2
stats = AICstats_2models(LnL_1, LnL_2, numparams1, numparams2)
res2 = extract_params_from_BioGeoBEARS_results_object(results_object=resDEC, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
res1 = extract_params_from_BioGeoBEARS_results_object(results_object=resDECj, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
tmp_tests = conditional_format_table(stats)
restable = rbind(restable, res2, res1)
teststable = rbind(teststable, tmp_tests)
row.names(restable) = c("DEC", "DEC+J")
teststable$alt = "DEC+J"
teststable$null = "DEC"
restable$AIC <- c(teststable$AIC2, teststable$AIC1)
restable -> model.comps[[i]]
write.table(as.matrix(restable), file=paste(l0, "_biogeobears_pars_AIC.txt", sep=""))
rownames(restable)[which.min(restable$AIC)] -> best.model
if (best.model == "DEC") {
resDEC -> biogeo
} else {
resDECj -> biogeo
}
biogeo -> ml.models[[i]]
best.model -> best.models[[i]]
### plot
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
pdf(file=paste(l0, "_biogeobears.pdf", sep=""), width=5, height=10)
#### COLOR SCHEME #### TV EDITED
colors_list_for_states<-c("green", "red", "blue", "darkorchid")
plot_BioGeoBEARS_results(biogeo, paste(l0, "-", best.model), addl_params=list("j"), plotwhat="pie", colors_list_for_states=colors_list_for_states, label.offset=0.001, tipcex=0.001, statecex=1.1, splitcex=0.4, titlecex=0.8, plotsplits=F,  cornercoords_loc=scriptdir, include_null_range=T, tr=t0, show.tip.label = F, tipranges = NULL)
dev.off()
try(dev.off())
#############################################
### Extrair ages (likelihood)
#############################################
relprobs_matrix = biogeo$ML_marginal_prob_each_state_at_branch_top_AT_node
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=matrix.file)
Ntip(t0) -> n.tips
Nnode(t0) -> n.nodes
c((n.tips++1):(n.tips++n.nodes)) -> nodes
pie.data <- relprobs_matrix[nodes,]
areas.labs = getareas_from_tipranges_object(tipranges)
statenames = areas_list_to_states_list_new(areas.labs, maxareas = max_range_size, include_null_range = T, split_ABC = FALSE)
colnames(pie.data) <- statenames
MLstates = get_ML_states_from_relprobs(relprobs_matrix, statenames, returnwhat = "states", if_ties = "takefirst")
MLstates[nodes] -> node.states
max(nodeHeights(t0)) -> tree.length
sapply(nodes, nodeheight, tree=t0) -> n
(n-tree.length)*-1 -> ages
data.frame(pie.data[,2:4], state=node.states, node=nodes, ages=ages) -> ages.mat
write.csv(ages.mat, file = paste(l0, "_Espinhaco_nodeages_ML_mcc.csv", sep=""), row.names = F)
pdf(file = paste(l0, "_Espinhaco_nodeages_ML_mcc_boxplot.pdf", sep=""))
boxplot(ages ~ state, data=ages.mat)
title(l0)
dev.off()
}
nmaps = 100
ntrees = 100
for (i in 1:length(labs)) {
labs[i] -> l0
sample(trees.post[[i]], ntrees, replace = F) -> trees
matrix.file = paste(l0, "_phylip.txt", sep="")
best.models[[i]] -> best.model
clado_events_tables <- list()
ana_events_tables <- list()
age_mat_tables <- vector("list", length=ntrees)
for (k in 1:ntrees) {
trees[[k]] -> t0
tree.file = paste(l0, "_p", k, sep="")
write.tree(t0, tree.file)
### Run ML first
if (best.model == "DEC") {
### DEC
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
biogeo = bears_optim_run(BioGeoBEARS_run_object)
} else {
### DEC+J
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","type"] = "free"
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = 0.0001
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = 0.0001
biogeo = bears_optim_run(BioGeoBEARS_run_object)
}
### Get Ages/states
relprobs_matrix = biogeo$ML_marginal_prob_each_state_at_branch_top_AT_node
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=matrix.file)
Ntip(t0) -> n.tips
Nnode(t0) -> n.nodes
c((n.tips++1):(n.tips++n.nodes)) -> nodes
pie.data <- relprobs_matrix[nodes,]
areas.labs = getareas_from_tipranges_object(tipranges)
statenames = areas_list_to_states_list_new(areas.labs, maxareas = max_range_size, include_null_range = T, split_ABC = FALSE)
colnames(pie.data) <- statenames
MLstates = get_ML_states_from_relprobs(relprobs_matrix, statenames, returnwhat = "states", if_ties = "takefirst")
MLstates[nodes] -> node.states
max(nodeHeights(t0)) -> tree.length
sapply(nodes, nodeheight, tree=t0) -> n
(n-tree.length)*-1 -> ages
data.frame(pie.data[,2:4], state=node.states, node=nodes, ages=ages) -> age_mat_tables[[k]]
### Run simmaps
stochastic_mapping_inputs_list = get_inputs_for_stochastic_mapping(res=biogeo)
BSM_output = runBSM(biogeo, stochastic_mapping_inputs_list=stochastic_mapping_inputs_list, maxnum_maps_to_try=2*nmaps, nummaps_goal=nmaps, maxtries_per_branch=40000, save_after_every_try=F)
clado_events_tables.k = BSM_output$RES_clado_events_tables
ana_events_tables.k = BSM_output$RES_ana_events_tables
include_null_range = TRUE
BSMs_w_sourceAreas = simulate_source_areas_ana_clado(biogeo, clado_events_tables.k, ana_events_tables.k, areanames)
c(clado_events_tables, BSMs_w_sourceAreas$clado_events_tables) -> clado_events_tables
c(ana_events_tables, BSMs_w_sourceAreas$ana_events_tables) -> ana_events_tables
unlink(tree.file)
}
### Summary ages
do.call(rbind, age_mat_tables) -> age_mat_tables
write.csv(age_mat_tables, file = paste(l0, "_Espinhaco_nodeages_ML_posterior.csv", sep=""), row.names = F)
pdf(file = paste(l0, "_Espinhaco_nodeages_ML_post_boxplot.pdf", sep=""))
boxplot(ages ~ state, data=age_mat_tables)
title(l0)
dev.off()
### Summary counts
counts_list = count_ana_clado_events(clado_events_tables, ana_events_tables, areanames, actual_names)
counts_list$all_dispersals_counts_fromto_means -> mean.disp
counts_list$all_dispersals_counts_fromto_sds -> sd.disp
write.csv(mean.disp, file="GBMB_dispersal_events_mean.csv")
write.csv(sd.disp, file="GBMB_dispersal_events_sd.csv")
############################################
# Extract age of dispersals - all together
############################################
do.call(rbind, ana_events_tables) -> ana_events_tables
do.call(rbind, clado_events_tables) -> clado_events_tables
clado_events_tables[-which(clado_events_tables$node.type == "tip"),] -> clado_events_tables
ana_events_tables[which(ana_events_tables$event_type != "e"),] -> ana_events_tables
subset(ana_events_tables, select=c("event_txt", "time_bp")) -> ana.e
subset(clado_events_tables, select=c("clado_event_txt", "time_bp")) -> clado.e
colnames(ana.e)[1] <- colnames(clado.e)[1] <- "events"
rbind(ana.e, clado.e) -> all.events
write.csv(all.events, file = paste(l0, "_Espinhaco_eventsages_simmaps_posterior.csv", sep=""), row.names = F)
pdf(file = paste(l0, "_Espinhaco_eventsages_simmaps_posterior_boxplot.pdf", sep=""), height = 4, width=20)
boxplot(time_bp ~ events, data=all.events)
title(l0)
dev.off()
}
list.files(pattern="dist.csv") -> files.mat
sub("dist.csv", "clean.trees", files.mat) -> files.post
sub("dist.csv", "clean.tre", files.mat) -> files.mcc
sapply(files.mcc, read.tree, simplify=F) -> trees.mcc
sapply(files.post, read.tree, simplify=F) -> trees.post
sub("_clean.tre", "", files.mcc) -> labs
keep = c("cr", "nonCr")
areanames = c("E", "N")
sapply(files.mat, read.csv, row.names=1, simplify=F) -> mats
lapply(mats, subset, select=keep) -> mats
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
trees.post[[i]] -> post0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
.compressTipLabel(lapply(post0, drop.tip, drop)) -> post0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
post0 -> trees.post[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
for (i in 1:length(labs)) {
labs[i] -> l0
mats[[i]] -> m0
colnames(m0) <- areanames
trees.mcc[[i]] -> mcc0
rownames(m0)[which(m0$E == "OUT")] -> drop
if (length(drop) > 0) {
drop.tip(mcc0, drop) -> mcc0
m0[-which(m0$E == "OUT"),] -> m0
mcc0 -> trees.mcc[[i]]
}
m0[mcc0$tip.label,] -> m0
m0 -> mats[[i]]
define_tipranges_object(m0) -> m0
save_tipranges_to_LagrangePHYLIP(m0, lgdata_fn = paste(l0, "_phylip.txt", sep=""))
}
max_range_size = 2
n.cores = 4
c("Espinhaco","nonEspinhaco") -> actual_names
vector("list", length=length(labs)) -> best.models -> model.comps -> ml.models
names(ml.models) <- names(best.models) <- names(model.comps) <- labs
for (i in 1:length(labs)) {
labs[i] -> l0
trees.mcc[[i]] -> t0
if (is.ultrametric(t0) == F) {
force.ultrametric(t0) -> t0
t0$edge.length[t0$edge.length == 0] <- 0.01
force.ultrametric(t0) -> t0
}
if (min(t0$edge.length)==0) {
force.ultrametric(t0) -> t0
t0$edge.length[t0$edge.length == 0] <- 0.01
force.ultrametric(t0) -> t0
}
tree.file = paste(l0, "_biogeo.tre", sep="")
matrix.file = paste(l0, "_phylip.txt", sep="")
write.tree(t0, tree.file)
### DEC
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
resDEC = bears_optim_run(BioGeoBEARS_run_object)
### DEC+J
BioGeoBEARS_run_object = define_BioGeoBEARS_run()
BioGeoBEARS_run_object$trfn = tree.file
BioGeoBEARS_run_object$geogfn = matrix.file
BioGeoBEARS_run_object$max_range_size = max_range_size
BioGeoBEARS_run_object$speedup = F
BioGeoBEARS_run_object$use_optimx = TRUE
BioGeoBEARS_run_object$num_cores_to_use = n.cores
BioGeoBEARS_run_object$return_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE
BioGeoBEARS_run_object$calc_ancprobs = TRUE
dstart = resDEC$outputs@params_table["d","est"]
estart = resDEC$outputs@params_table["e","est"]
jstart = 0.0001
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","init"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","est"] = dstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","init"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","est"] = estart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","type"] = "free"
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = jstart
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = jstart
resDECj = bears_optim_run(BioGeoBEARS_run_object)
### Stats
restable = NULL
teststable = NULL
LnL_2 = get_LnL_from_BioGeoBEARS_results_object(resDEC)
LnL_1 = get_LnL_from_BioGeoBEARS_results_object(resDECj)
numparams1 = 3
numparams2 = 2
stats = AICstats_2models(LnL_1, LnL_2, numparams1, numparams2)
res2 = extract_params_from_BioGeoBEARS_results_object(results_object=resDEC, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
res1 = extract_params_from_BioGeoBEARS_results_object(results_object=resDECj, returnwhat="table", addl_params=c("j"), paramsstr_digits=4)
tmp_tests = conditional_format_table(stats)
restable = rbind(restable, res2, res1)
teststable = rbind(teststable, tmp_tests)
row.names(restable) = c("DEC", "DEC+J")
teststable$alt = "DEC+J"
teststable$null = "DEC"
restable$AIC <- c(teststable$AIC2, teststable$AIC1)
restable -> model.comps[[i]]
write.table(as.matrix(restable), file=paste(l0, "_biogeobears_pars_AIC.txt", sep=""))
rownames(restable)[which.min(restable$AIC)] -> best.model
if (best.model == "DEC") {
resDEC -> biogeo
} else {
resDECj -> biogeo
}
biogeo -> ml.models[[i]]
best.model -> best.models[[i]]
### plot
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
pdf(file=paste(l0, "_biogeobears.pdf", sep=""), width=5, height=10)
#### COLOR SCHEME #### TV EDITED
colors_list_for_states<-c("green", "red", "blue", "darkorchid")
plot_BioGeoBEARS_results(biogeo, paste(l0, "-", best.model), addl_params=list("j"), plotwhat="pie", colors_list_for_states=colors_list_for_states, label.offset=0.001, tipcex=0.001, statecex=1.1, splitcex=0.4, titlecex=0.8, plotsplits=F,  cornercoords_loc=scriptdir, include_null_range=T, tr=t0, show.tip.label = F, tipranges = NULL)
dev.off()
try(dev.off())
#############################################
### Extrair ages (likelihood)
#############################################
relprobs_matrix = biogeo$ML_marginal_prob_each_state_at_branch_top_AT_node
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=matrix.file)
Ntip(t0) -> n.tips
Nnode(t0) -> n.nodes
c((n.tips++1):(n.tips++n.nodes)) -> nodes
pie.data <- relprobs_matrix[nodes,]
areas.labs = getareas_from_tipranges_object(tipranges)
statenames = areas_list_to_states_list_new(areas.labs, maxareas = max_range_size, include_null_range = T, split_ABC = FALSE)
colnames(pie.data) <- statenames
MLstates = get_ML_states_from_relprobs(relprobs_matrix, statenames, returnwhat = "states", if_ties = "takefirst")
MLstates[nodes] -> node.states
max(nodeHeights(t0)) -> tree.length
sapply(nodes, nodeheight, tree=t0) -> n
(n-tree.length)*-1 -> ages
data.frame(pie.data[,2:4], state=node.states, node=nodes, ages=ages) -> ages.mat
write.csv(ages.mat, file = paste(l0, "_Espinhaco_nodeages_ML_mcc.csv", sep=""), row.names = F)
pdf(file = paste(l0, "_Espinhaco_nodeages_ML_mcc_boxplot.pdf", sep=""))
boxplot(ages ~ state, data=ages.mat)
title(l0)
dev.off()
}
x<-read.tree("habenaria_clean.tre")
write.csv(x$tip.label, file="habenaria")
x<-read.tree("habenaria_clean.tre")
write.csv(x$tip.label, file="habenaria")
setwd("~/Desktop/manuscripts and projects/__EMRF/__PAPER 1 - diversification dynamics/MANUSCRIPT/FINAL/SI_data/cleaned_trees")
x<-read.tree("habenaria_clean.tre")
write.csv(x$tip.label, file="habenaria")
